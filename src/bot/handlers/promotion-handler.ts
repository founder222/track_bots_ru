import TelegramBot from 'node-telegram-bot-api'
import { Payments } from '../../lib/payments'
import { PromotionType } from '@prisma/client'
import { GeneralMessages } from '../messages/general-messages'
import { PaymentsMessageEnum } from '../../types/messages-types'
import { INSUFFICIENT_BALANCE_SUB_MENU, SUB_MENU } from '../../config/bot-menus'

export class PromotionHandler {
  private payments: Payments
  constructor(private bot: TelegramBot) {
    this.bot = bot
    this.payments = new Payments()
  }

  public async buyPromotion(message: TelegramBot.Message, promotionPrice: number, promotionType: PromotionType) {
    const userId = String(message.chat.id)
    const chatId = message.chat.id

    const { message: paymentMessage, success } = await this.payments.chargePromotion(
      userId,
      promotionPrice,
      promotionType,
    )

    if (paymentMessage === PaymentsMessageEnum.INSUFFICIENT_BALANCE) {
      this.bot.editMessageText(GeneralMessages.insufficientBalanceMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: INSUFFICIENT_BALANCE_SUB_MENU,
        parse_mode: 'HTML',
      })
    } else if (paymentMessage === PaymentsMessageEnum.USER_ALREADY_PAID) {
      this.bot.editMessageText('–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –∞–∫—Ü–∏—é', {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: INSUFFICIENT_BALANCE_SUB_MENU,
        parse_mode: 'HTML',
      })
    } else if (paymentMessage === PaymentsMessageEnum.TRANSACTION_SUCCESS) {
      this.bot.editMessageText(
        `
üò∏ –ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞!

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.

–¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ 50 –∫–æ—à–µ–ª—å–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞! ‚ú®
`,
        {
          chat_id: chatId,
          message_id: message.message_id,
          reply_markup: SUB_MENU,
          parse_mode: 'HTML',
        },
      )
    } else {
      this.bot.editMessageText(GeneralMessages.generalMessageError, {
        chat_id: chatId,
        message_id: message.message_id,
        reply_markup: SUB_MENU,
        parse_mode: 'HTML',
      })
    }

    return
  }
}
